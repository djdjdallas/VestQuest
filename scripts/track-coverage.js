#!/usr/bin/env node

/**
 * Script to track test coverage over time
 * Run after generating coverage report to add an entry to the coverage history
 * 
 * Usage: node scripts/track-coverage.js
 */

const fs = require('fs');
const path = require('path');

// Path to the coverage summary file generated by Jest
const COVERAGE_SUMMARY_PATH = path.resolve(__dirname, '../coverage/coverage-summary.json');

// Path to the history file
const HISTORY_FILE_PATH = path.resolve(__dirname, '../coverage-history.json');

// Get current date
const currentDate = new Date().toISOString().split('T')[0];

// Read the current coverage report
try {
  const coverageSummary = JSON.parse(fs.readFileSync(COVERAGE_SUMMARY_PATH, 'utf8'));
  const totalCoverage = coverageSummary.total;

  // Create history data structure if it doesn't exist
  let history = [];
  if (fs.existsSync(HISTORY_FILE_PATH)) {
    history = JSON.parse(fs.readFileSync(HISTORY_FILE_PATH, 'utf8'));
  }

  // Add current coverage data
  history.push({
    date: currentDate,
    lines: totalCoverage.lines.pct,
    statements: totalCoverage.statements.pct,
    functions: totalCoverage.functions.pct,
    branches: totalCoverage.branches.pct,
  });

  // Save updated history
  fs.writeFileSync(HISTORY_FILE_PATH, JSON.stringify(history, null, 2));
  
  console.log('Coverage history updated successfully!');
  console.log(`Current coverage: ${totalCoverage.lines.pct}% of lines, ${totalCoverage.functions.pct}% of functions`);
  
} catch (error) {
  console.error('Error processing coverage data:', error.message);
  console.error('Make sure to run "npm run test:coverage" before running this script.');
  process.exit(1);
}